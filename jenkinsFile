pipeline {
  agent any 
  environment {
    GIT_REPO = 'https://github.com/Cloud-savvy/DevOps.git'
    DOCKER_REPO = 'https://index.docker.io/v1/'
    DOCKER_UNAME = 'bromaaascripts'
    A_D_HOST = '172.16.33.113'
    K8S_HOST = '172.16.33.243'
    WORK_DIR = '/var/lib/jenkins_home/workspace/DevOps-Project'
  }
  parameters {
    string(name: 'DOCKER_TAG', defaultValue: 'LATEST', description: 'docker image tag (e.g., latest, v1.0)')
    string(name: 'DOCKER_BUILD_ID', defaultValue: '1', description: 'build id for docker image')
  }
  stages {
    stage('pull to GitHub') {
      steps {
        git branch: 'main', url: "${env.GIT_REPO}"
      }
    }
    stage('Copy files to their respective servers') {
      steps {
        script {
          def filesToTransfer = [
            "Dockerfile": A_D_HOST,
            "ansible.yml": A_D_HOST,
            "Deployment.yml": K8S_HOST,
            "Service.yml": K8S_HOST
          ]
          for (file in filesToTransfer) {
            def fileName = file.key
            def targetServer = file.value
            if (fileExists("${env.WORK_DIR}/${fileName}")) {
              echo "Transferring ${fileName} to ${targetServer}"
              sh "scp ${env.WORK_DIR}/${fileName} ubuntu@${targetServer}:/home/ubuntu"
            } else {
              error("File ${fileName} not found in ${env.WORK_DIR}. Cannot transfer to ${targetServer}")
            }
          }
        }
      }
    }
    stage('Create a docker image push to DockerHub and delete') {
      steps {
        withCredentials([credentialsId: 'docker-cred', usernameVariable: 'DOCKER_UNAME', passwordVariable: 'DOCKER_PW']) {
          script {
            sh '''
            set -e
            ssh ubuntu@${env.A_D_HOST} "cd /home/ubuntu && \
            docker image build -t ${env.DOCKER_UNAME}/$JOB_NAME:${params.DOCKER_TAG}-${params.DOCKER_BUILD_ID} . && \
            docker tag ${env.DOCKER_UNAME}/$JOB_NAME:${params.DOCKER_TAG}-${params.DOCKER_BUILD_ID} ${env.DOCKER_UNAME}/$JOB_NAME:latest && \
            docker push ${env.DOCKER_UNAME}/$JOB_NAME:${params.DOCKER_TAG}-${params.DOCKER_BUILD_ID} && \
            docker push ${env.DOCKER_UNAME}/$JOB_NAME:latest && \
            docker images prune -af && \
            docker logout"
            '''
          }
        }
      }
    }
  }
  post {
    success {
      echo 'Build completed successfully.'
    }
    failure {
      echo 'Build failed. Please check the logs for more details.'
    }
  }
}

          
